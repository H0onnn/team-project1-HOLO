-- 테이블 삭제
DROP TABLE ORDERS;
DROP TABLE CUSTOMERS;
DROP TABLE BOOKS;


-- 1. 다음 설명을 읽고 적절한 테이블을 생성하되, 기본키/외래키는 별도로 설정하지 않는다.

-- 1) BOOKS 테이블
--    (1) BOOKID : 책 아이디, 숫자 (최대 11자리), 필수
--    (2) BOOKNAME : 책 이름, 가변 길이 문자 (최대 100)
--    (3) PUBLISHER : 출판사, 가변 길이 문자 (최대 50)
--    (4) PRICE : 가격, 숫자 (최대 6자리)
CREATE TABLE BOOKS (
    BOOKID NUMBER(11),
    BOOKNAME VARCHAR2(100),
    PUBLISHER VARCHAR2(50),
    PRICE NUMBER(6)
);


-- 2) CUSTOMERS 테이블
--    (1) CUSTID : 고객 아이디, 숫자 (최대 11자리), 필수
--    (2) CUSTNAME : 고객 이름, 가변 길이 문자 (최대 20)
--    (3) ADDRESS : 고객 주소, 가변 길이 문자 (최대 50)
--    (4) PHONE : 고객 전화, 고정 길이 문자 (최대 20)
CREATE TABLE CUSTOMERS (
    CUSTID NUMBER(11),
    CUSTNAME VARCHAR2(20),
    ADDRESS VARCHAR2(50),
    PHONE CHAR(20)
);


-- 3) ORDERS 테이블
--    (1) ORDERID : 주문 아이디, 숫자 (최대 11자리), 필수
--    (2) CUSTID : 고객 아이디, 숫자 (최대 11자리)
--    (3) BOOKID : 책 아이디, 숫자 (최대 11자리)
--    (4) SALEPRICE : 판매 가격, 숫자 (최대 6자리)
--    (5) ORDERDATE : 주문일, 날짜
CREATE TABLE ORDERS (
    ORDERID NUMBER(11),
    CUSTID NUMBER(11),
    BOOKID NUMBER(11),
    SALEPRICE NUMBER(6),
    ORDERDATE DATE
);


-- 4) 아래 INSERT 문은 변경 없이 그대로 사용한다.
INSERT INTO BOOKS VALUES (1, '축구의역사', '굿스포츠', 7000);
INSERT INTO BOOKS VALUES (2, '축구아는 여자', '나무수', 13000);
INSERT INTO BOOKS VALUES (3, '축구의 이해', '대한미디어', 22000);
INSERT INTO BOOKS VALUES (4, '골프 바이블', '대한미디어', 35000);
INSERT INTO BOOKS VALUES (5, '피겨 교본', '굿스포츠', 6000);
INSERT INTO BOOKS VALUES (6, '역도 단계별 기술', '굿스포츠', 6000);
INSERT INTO BOOKS VALUES (7, '야구의 추억', '이상미디어', 20000);
INSERT INTO BOOKS VALUES (8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO BOOKS VALUES (9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO BOOKS VALUES (10,'올림픽 챔피언', '피어슨', 13000);

INSERT INTO CUSTOMERS VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO CUSTOMERS VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO CUSTOMERS VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO CUSTOMERS VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO CUSTOMERS VALUES (5, '박세리', '대한민국 대전', NULL);

INSERT INTO ORDERS VALUES (1, 1, 1, 6000, '2014-07-01');
INSERT INTO ORDERS VALUES (2, 1, 3, 21000, '2014-07-03');
INSERT INTO ORDERS VALUES (3, 2, 5, 8000, '2014-07-03');
INSERT INTO ORDERS VALUES (4, 3, 6, 6000, '2014-07-04');
INSERT INTO ORDERS VALUES (5, 4, 7, 20000, '2014-07-05');
INSERT INTO ORDERS VALUES (6, 1, 2, 12000, '2014-07-07');
INSERT INTO ORDERS VALUES (7, 4, 8, 13000, '2014-07-07');
INSERT INTO ORDERS VALUES (8, 3, 10, 12000, '2014-07-08');
INSERT INTO ORDERS VALUES (9, 2, 10, 7000, '2014-07-09');
INSERT INTO ORDERS VALUES (10, 3, 8, 13000, '2014-07-10');

COMMIT;


-- 2. BOOKS, CUSTOMERS, ORDERS 테이블에 적절한 칼럼에 기본키를 추가하시오.
-- 적절한 제약 조건 이름도 함께 부여하시오.
ALTER TABLE BOOKS ADD CONSTRAINT BOOKS_PK PRIMARY KEY(BOOKID);
ALTER TABLE CUSTOMERS ADD CONSTRAINT CUSTOMERS_PK PRIMARY KEY(CUSTID);
ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_PK PRIMARY KEY(ORDERID);


-- 3. 외래키가 필요한 테이블을 선정하고 적절한 칼럼에 외래키를 추가하시오.
-- 적절한 제약 조건 이름도 함께 부여하시오.
ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_BOOKS_FK FOREIGN KEY (BOOKID) REFERENCES BOOKS (BOOKID);
ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_CUSTOMERS_FK FOREIGN KEY (CUSTID) REFERENCES CUSTOMERS (CUSTID);


-- 4. 2014년 7월 4일부터 7월 7일 사이에 주문 받은 도서를 제외하고 나머지 모든 주문 정보를 조회하시오.
SELECT *
FROM ORDERS
WHERE ORDERDATE NOT BETWEEN '14/07/04' AND '14/07/07';


-- 5. 박지성의 총 구매액(SALEPRICE)을 아래 각각의 방법으로 조회하시오.
-- 1) 조인1 : 쉼표(,) 구분법
SELECT SUM(SALEPRICE) AS 총구매액
FROM ORDERS O, CUSTOMERS C
WHERE O.CUSTID = C.CUSTID  -- 조인조건
AND C.CUSTNAME = '박지성';  -- 일반조건

-- 2) 조인2: INNER JOIN 구문
SELECT SUM(SALEPRICE) AS 총구매액
FROM ORDERS O INNER JOIN CUSTOMERS C
ON O.CUSTID = C.CUSTID  -- 조인조건
WHERE C.CUSTNAME = '박지성';  -- 일반조건

-- 3) 서브쿼리
SELECT SUM(SALEPRICE) AS 총구매액
FROM ORDERS O, (SELECT * FROM CUSTOMERS WHERE CUSTNAME = '박지성') C
WHERE O.CUSTID = C.CUSTID;


-- 6. 박지성이 구매한 도서의 수를 조회하시오.
SELECT COUNT(*) AS 구매건수
FROM ORDERS O, CUSTOMERS C
WHERE O.CUSTID = C.CUSTID  -- 조인조건
AND C.CUSTNAME = '박지성';  -- 일반조건


-- 7. 박지성이 구매한 도서를 발간한 출판사 수를 조회하시오.
SELECT COUNT(DISTINCT B.PUBLISHER)
FROM ORDERS O, CUSTOMERS C, BOOKS B
WHERE O.CUSTID = C.CUSTID  -- 조인조건1
AND O.BOOKID = B.BOOKID  -- 조인조건2
AND C.CUSTNAME = '박지성';  -- 일반조건


-- 8. 고객별로 분류하여 각 고객의 이름과 각 고객별 총 구매액을 조회하시오.
SELECT C.CUSTNAME, SUM(O.SALEPRICE) AS 고객별구매액
FROM ORDERS O, CUSTOMERS C
WHERE O.CUSTID = C.CUSTID
GROUP BY C.CUSTNAME;


-- 9. 한 번도 주문한 적이 없는 고객의 이름을 조회하시오.
-- 1) 조건을 CUSTID 로 진행
SELECT CUSTNAME
FROM CUSTORMERS
WHERE CUSTID NOT IN (SELECT DISTINCT CUSTID FROM ORDERS);

-- 2) 조건을 CUSTNAME 으로 진행
SELECT CUSTNAME
FROM CUSTOMERS
WHERE CUSTNAME NOT IN (SELECT DISTINCT C.CUSTNAME FROM ORDERS O, CUSTOMERS C WHERE O.CUSTID = C.CUSTID);


-- 10. 고객별로 총 구매횟수를 조회하시오. 구매한 적이 없는 고객은 구매횟수를 0으로 표시하시오.
-- 1) 콤마(,) 구분 법
SELECT C.CUSTID, C.CUSTNAME, COUNT(O.CUSTID) AS 구매횟수
FROM ORDERS O, CUSTOMERS C
WHERE O.CUSTID(+) = C.CUSTID
GROUP BY C.CUSTID, C.CUSTNAME;

-- 2) JOIN ON 문법
SELECT C.CUSTID, C.CUSTNAME, COUNT(O.CUSTID) AS 구매횟수
FROM ORDERS O RIGHT OUTER JOIN CUSTOMERS C
ON O.CUSTID = C.CUSTID
GROUP BY C.CUSTID, C.CUSTNAME;

